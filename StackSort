import java.util.Stack;

public class StackSort {
    public static void ascendingSort(Stack<Integer> stack) {
        if (stack.isEmpty()) return;
        Stack<Integer> tempStack = new Stack<>();
        tempStack.push(stack.pop());
        while (!stack.isEmpty()) {
            int temp = stack.pop();
            while (!tempStack.isEmpty() && tempStack.peek() > temp) {
                stack.push(tempStack.pop());
            }
            tempStack.push(temp);
        }
        while (!tempStack.isEmpty()) {
            stack.push(tempStack.pop());
        }

    }

    public static void descendingSort(Stack<Integer> stack) {
        if (stack.isEmpty()) return;
        Stack<Integer> tempStack = new Stack<>();
        tempStack.push(stack.pop());
        while (!stack.isEmpty()) {
            int temp = stack.pop();
            while (!tempStack.isEmpty() && tempStack.peek() < temp) {
                stack.push(tempStack.pop());
            }
            tempStack.push(temp);
        }
        while (!tempStack.isEmpty()) {
            stack.push(tempStack.pop());
        }

    }
}
