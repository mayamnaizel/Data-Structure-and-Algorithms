public class ArrayQueues<T> {
    private T[] array;
    private int front;
    private int rear;
    private int size;

    public ArrayQueues(int capacity) {
        this.array = (T[]) new Object[capacity];
        this.front = 0;
        this.rear = -1;
        this.size = 0;
    }

    public void enqueue(T entry) {
        if (isFull()) {
            throw new RuntimeException("Queue is full");
        }
        rear++;
        array[rear] = entry;
        size++;
    }

    public T dequeue() {
        if (isEmpty()) {
            throw new RuntimeException("Queue is empty");
        }
        T entry = array[front];
        front++;
        size--;
        return entry;
    }

    public T peek() {
        if (isEmpty()) {
            throw new RuntimeException("Queue is Empty");
        }
        return array[front];
    }

    public boolean isEmpty() {
        return size == 0;
    }

    public boolean isFull() {
        return size == array.length;
    }

    public void reverse() {
        if (isEmpty()) return;
        int i = front;
        int j = rear;
        while (i < j) {
            T temp = array[i];
            array[i] = array[j];
            array[j] = temp;
            i++;
            j--;
        }
    }

}
