public class Stacks<T> {
    private Node top;
    private int count;

    private class Node {
        T item;
        Node next;

        public Node(T item) {
            this.item = item;
            this.next = next;
        }
    }

    public void push(T entry) {
        Node newNode = new Node(entry);
        newNode.next = top; //let the new node connect to the head node
        top = newNode; // after the connection let the new node = head
        count++; //add the size
    }

    public T pop() {
        if (isEmpty()) {
            throw new IllegalStateException("Stack is empty");
        }
        T item = top.item; //references to the data of the head
        top = top.next; //top = the next node for deletion
        count--; //removing size
        return item;
    }

    public T peek() {
        if (isEmpty()) {
            throw new IllegalStateException("Stack is empty");
        }
        return top.item;
    }

    public boolean isEmpty() {
        return top == null;
    }

    public void reverse() {
        if (isEmpty()) {
            return;
        }
        Node current = top;
        Node prev = null;
        while (current != null) {
            Node next = current.next;
            current.next = prev;
            prev = current;
            current = next;
        }
        top = prev;
    }

    public void clear() {
        while (!isEmpty()) {
            pop();
        }
    }

    public int size() {
        return count;
    }

    public boolean contains(T entry) {
        Node current = top;
        while (current != null) {
            if (current.item.equals(entry)) {
                return true;
            }
            current = current.next;
        }
        return false;
    }

    public void removeDuplicates() {
        if (isEmpty()) {
            return;
        }
        Node current = top;
        while (current != null) {
            Node runner = current;
            while (runner.next != null) {
                if (runner.next.item.equals(current.item)) {
                    runner.next = (Node) runner.next.item;
                } else runner = runner.next;
            }
        }
        current = current.next;
    }

    public T peekBottom() {
        if (isEmpty()) {
            throw new RuntimeException("Stack is Empty");
        }
        Node current = top;
        while (current.next != null) {
            current = current.next;
        }
        return current.item;
    }

    public void rotateRight(int k) {
        if (isEmpty() || k == 0) {
            return;
        }
        int size = 1;
        Node current = top;
        while (current.next != null) {
            size++;
            current = current.next;
        }
        current.next = top;
        int rotation = size - (k % size);
        for (int i = 0; i < rotation; i++) {
            current = current.next;
        }
        top = current.next;
        current.next = null;
    }

    public void rotateLeft(int k) {
        if (isEmpty() || k == 0) {
            return;
        }
        int size = 1;
        Node current = top;
        while (current.next != null) {
            size++;
            current = current.next;
        }
        current.next = top;
        int rotation = k % size;
        for (int i = 0; i < rotation; i++) {
            current = current.next;
        }
        top = current.next;
        current.next = null;
    }

    public void remove(T entry) {
        if (isEmpty()) {
            return;
        }
        Node prev = null;
        Node current = top;
        while (current != null) {
            if (current.item.equals(entry)) {
                if (prev == null) {
                    top = current.next;
                } else prev.next = current.next;
                return;
            }
            prev = current;
            current = current.next;
        }
    }

    public void swapTopTwo() {
        if (isEmpty() || top.next == null) {
            return;
        }
        Node first = top;
        Node second = top.next;
        first.next = second.next;
        second.next = first;
        top = second;
    }

    public T getItemFromTop(int n) {
        if (isEmpty() || n < 1 || n > size()) {
            throw new IllegalArgumentException("Invalid");
        }
        Node node = top;
        for (int i = 1; i < n; i++) {
            node = node.next;
        }
        return node.item;

    }

    public T getItemFromBottom(int n) {
        if (isEmpty() || n < 1 || n > size()) {
            throw new IllegalArgumentException("Invalid");
        }
        Node node = top;
        for (int i = 1; i < size() - n; i++) {
            node = node.next;
        }
        return node.item;

    }

    public void moveElementToTheTop(int n) {
        if (n <= 0 || n > size()) {
            throw new IllegalArgumentException("Invalid");
        }
        Node node = top;
        for (int i = 1; i < n; i++) {
            node = node.next;
        }
        Node prev = null;
        Node current = top;
        while (current != node) {
            prev = current;
            current = current.next;
        }
        prev.next = current.next;
        node.next = top;
        top = node;
    }

    public T getNthFromBottom(int n) {
        Node current = top;
        int count = 1;
        while (current != null && count < n) {
            current = current.next;
            count++;
        }
        if (current == null) return null;
        Node NthFromBottom = top;
        while (current.next != null) {
            current = current.next;
            NthFromBottom = NthFromBottom.next;
        }
        return NthFromBottom.item;
    }


}

