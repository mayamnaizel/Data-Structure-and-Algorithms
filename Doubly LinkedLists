public class doublyLinked {
    class Node {
        int data;
        Node prev;
        Node next;

        public Node(int data) {
            this.data = data;
            this.prev = null;
            this.next = null;
        }
    }


        private Node head;
        private Node tail;

        public doublyLinked() {
            this.head = null;
            this.tail = null;
        }

        public boolean isEmpty() {
            return head == null;
        }

        public void insertAtBeginning(int data) {
            Node newNode = new Node(data);
            if (isEmpty()) {
                head = newNode;
                tail = newNode;
            } else {
                newNode.next = head;
                head.prev = newNode;
                head = newNode;
            }
        }

        public void insertAtEnd(int data) {
            Node newNode = new Node(data);
            if (isEmpty()) {
                head = newNode;
                tail = newNode;
            } else {
                newNode.prev = tail;
                tail.next = newNode;
                tail = newNode;
            }
        }

        public void insertAfter(int key, int data) {
            Node newNode = new Node(data);
            Node current = head;
            while (current != null) {
                if (current.data == key) {
                    newNode.prev = current;
                    newNode.next = current.next;
                    if (current.next != null) {
                        current.next.prev = newNode;
                    } else {
                        tail = newNode;
                    }
                    current.next = newNode;
                    break;
                }
                current = current.next;
            }
        }

        public void delete(int data) {
            if (isEmpty()) {
                return;
            }
            Node current = head;
            while (current != null) {
                if (current.data == data) {
                    if (current.prev != null) {
                        current.prev.next = current.next;
                    } else {
                        head = current.next;
                    }
                    if (current.next != null) {
                        current.next.prev = current.prev;
                    } else {
                        tail = current.prev;
                    }
                    break;
                }
                current = current.next;
            }
        }

        public void display() {
            Node current = head;
            while (current != null) {
                System.out.print(current.data + " ");
                current = current.next;
            }
            System.out.println();
        }
    }


